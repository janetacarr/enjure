(ns enjure.router.internal.radix-tree-data)

(defn data-fix
  [test-routes]
  (->> test-routes
       (reduce (fn [acc pair]
                 (let [pm (apply array-map pair)
                       k (-> pm keys first)
                       v (-> pm vals first)]
                   (if-let [acc-v (get acc k)]
                     (assoc acc k (merge acc-v v))
                     (merge acc pm)))) {})
       (vec)))

(def test-routes
  [["/authorizations" {:get (fn [req] {:status 200 :body "Authorizations fetched successfully."})}]
   ["/authorizations/:id" {:get (fn [req] {:status 200 :body "Authorization details fetched successfully."})}]
   ["/authorizations" {:post (fn [req] {:status 201 :body "Authorization created successfully."})}]
   ["/authorizations/:id" {:delete (fn [req] {:status 204 :body "Authorization deleted successfully."})}]
   ["/applications/:client_id/tokens/:access_token" {:get (fn [req] {:status 200 :body "Token details fetched successfully."})}]
   ["/applications/:client_id/tokens" {:delete (fn [req] {:status 204 :body "Tokens deleted successfully."})}]
   ["/applications/:client_id/tokens/:access_token" {:delete (fn [req] {:status 204 :body "Token deleted successfully."})}]

   ;; Activity
   ["/events" {:get (fn [req] {:status 200 :body "Events fetched successfully."})}]
   ["/repos/:owner/:repo/events" {:get (fn [req] {:status 200 :body "Repository events fetched successfully."})}]
   ["/networks/:owner/:repo/events" {:get (fn [req] {:status 200 :body "Network events fetched successfully."})}]
   ["/orgs/:org/events" {:get (fn [req] {:status 200 :body "Organization events fetched successfully."})}]
   ["/users/:user/received_events" {:get (fn [req] {:status 200 :body "Received events fetched successfully."})}]
   ["/users/:user/received_events/public" {:get (fn [req] {:status 200 :body "Public received events fetched successfully."})}]
   ["/users/:user/events" {:get (fn [req] {:status 200 :body "User events fetched successfully."})}]
   ["/users/:user/events/public" {:get (fn [req] {:status 200 :body "Public user events fetched successfully."})}]
   ["/users/:user/events/orgs/:org" {:get (fn [req] {:status 200 :body "Organization events for user fetched successfully."})}]
   ["/feeds" {:get (fn [req] {:status 200 :body "Feeds fetched successfully."})}]
   ["/notifications" {:get (fn [req] {:status 200 :body "Notifications fetched successfully."})}]
   ["/repos/:owner/:repo/notifications" {:get (fn [req] {:status 200 :body "Repository notifications fetched successfully."})}]
   ["/notifications" {:put (fn [req] {:status 200 :body "Notifications updated successfully."})}]
   ["/repos/:owner/:repo/notifications" {:put (fn [req] {:status 200 :body "Repository notifications updated successfully."})}]
   ["/notifications/threads/:id" {:get (fn [req] {:status 200 :body "Notification thread details fetched successfully."})}]
   ["/notifications/threads/:id/subscription" {:get (fn [req] {:status 200 :body "Subscription details fetched successfully."})}]
   ["/notifications/threads/:id/subscription" {:put (fn [req] {:status 200 :body "Subscription updated successfully."})}]
   ["/notifications/threads/:id/subscription" {:delete (fn [req] {:status 204 :body "Subscription deleted successfully."})}]
   ["/repos/:owner/:repo/stargazers" {:get (fn [req] {:status 200 :body "Stargazers fetched successfully."})}]
   ["/users/:user/starred" {:get (fn [req] {:status 200 :body "Starred repositories fetched successfully."})}]
   ["/user/starred" {:get (fn [req] {:status 200 :body "Starred repositories fetched successfully."})}]
   ["/user/starred/:owner/:repo" {:get (fn [req] {:status 200 :body "Starred repository details fetched successfully."})}]
   ["/user/starred/:owner/:repo" {:put (fn [req] {:status 204 :body "Repository starred successfully."})}]
   ["/user/starred/:owner/:repo" {:delete (fn [req] {:status 204 :body "Repository unstarred successfully."})}]
   ["/repos/:owner/:repo/subscribers" {:get (fn [req] {:status 200 :body "Subscribers fetched successfully."})}]
   ["/users/:user/subscriptions" {:get (fn [req] {:status 200 :body "User subscriptions fetched successfully."})}]
   ["/user/subscriptions" {:get (fn [req] {:status 200 :body "User subscriptions fetched successfully."})}]
   ["/repos/:owner/:repo/subscription" {:get (fn [req] {:status 200 :body "Repository subscription details fetched successfully."})}]
   ["/repos/:owner/:repo/subscription" {:put (fn [req] {:status 204 :body "Subscription updated successfully."})}]
   ["/repos/:owner/:repo/subscription" {:delete (fn [req] {:status 204 :body "Subscription deleted successfully."})}]
   ["/user/subscriptions/:owner/:repo" {:get (fn [req] {:status 200 :body "User subscription details fetched successfully."})}]
   ["/user/subscriptions/:owner/:repo" {:put (fn [req] {:status 204 :body "Subscription updated successfully."})}]
   ["/user/subscriptions/:owner/:repo" {:delete (fn [req] {:status 204 :body "Subscription deleted successfully."})}]

   ;; Gists
   ["/users/:user/gists" {:get (fn [req] {:status 200 :body "User gists fetched successfully."})}]
   ["/gists" {:get (fn [req] {:status 200 :body "Gists fetched successfully."})}]
   ["/gists/:id" {:get (fn [req] {:status 200 :body "Gist details fetched successfully."})}]
   ["/gists" {:post (fn [req] {:status 201 :body "Gist created successfully."})}]
   ["/gists/:id/star" {:put (fn [req] {:status 204 :body "Gist starred successfully."})}]
   ["/gists/:id/star" {:delete (fn [req] {:status 204 :body "Star removed from gist successfully."})}]
   ["/gists/:id/star" {:get (fn [req] {:status 200 :body "Star status fetched successfully."})}]
   ["/gists/:id/forks" {:post (fn [req] {:status 201 :body "Gist forked successfully."})}]
   ["/gists/:id" {:delete (fn [req] {:status 204 :body "Gist deleted successfully."})}]

   ;; Git Data
   ["/repos/:owner/:repo/git/blobs/:sha" {:get (fn [req] {:status 200 :body "Git blob details fetched successfully."})}]
   ["/repos/:owner/:repo/git/blobs" {:post (fn [req] {:status 201 :body "Git blob created successfully."})}]
   ["/repos/:owner/:repo/git/commits/:sha" {:get (fn [req] {:status 200 :body "Git commit details fetched successfully."})}]
   ["/repos/:owner/:repo/git/commits" {:post (fn [req] {:status 201 :body "Git commit created successfully."})}]
   ["/repos/:owner/:repo/git/refs" {:get (fn [req] {:status 200 :body "Git refs fetched successfully."})}]
   ["/repos/:owner/:repo/git/refs" {:post (fn [req] {:status 201 :body "Git ref created successfully."})}]
   ["/repos/:owner/:repo/git/tags/:sha" {:get (fn [req] {:status 200 :body "Git tag details fetched successfully."})}]
   ["/repos/:owner/:repo/git/tags" {:post (fn [req] {:status 201 :body "Git tag created successfully."})}]
   ["/repos/:owner/:repo/git/trees/:sha" {:get (fn [req] {:status 200 :body "Git tree details fetched successfully."})}]
   ["/repos/:owner/:repo/git/trees" {:post (fn [req] {:status 201 :body "Git tree created successfully."})}]

   ;; Issues
   ["/issues" {:get (fn [req] {:status 200 :body "Issues fetched successfully."})}]
   ["/user/issues" {:get (fn [req] {:status 200 :body "User issues fetched successfully."})}]
   ["/orgs/:org/issues" {:get (fn [req] {:status 200 :body "Organization issues fetched successfully."})}]
   ["/repos/:owner/:repo/issues" {:get (fn [req] {:status 200 :body "Repository issues fetched successfully."})}]
   ["/repos/:owner/:repo/issues/:number" {:get (fn [req] {:status 200 :body "Issue details fetched successfully."})}]
   ["/repos/:owner/:repo/issues" {:post (fn [req] {:status 201 :body "Issue created successfully."})}]
   ["/repos/:owner/:repo/assignees" {:get (fn [req] {:status 200 :body "Assignees fetched successfully."})}]
   ["/repos/:owner/:repo/assignees/:assignee" {:get

                                               (fn [req] {:status 200 :body "Assignee details fetched successfully."})}]
   ["/repos/:owner/:repo/issues/:number/comments" {:get (fn [req] {:status 200 :body "Issue comments fetched successfully."})}]
   ["/repos/:owner/:repo/issues/:number/comments" {:post (fn [req] {:status 201 :body "Comment added to issue successfully."})}]
   ["/repos/:owner/:repo/issues/:number/events" {:get (fn [req] {:status 200 :body "Issue events fetched successfully."})}]
   ["/repos/:owner/:repo/labels" {:get (fn [req] {:status 200 :body "Labels fetched successfully."})}]
   ["/repos/:owner/:repo/labels/:name" {:get (fn [req] {:status 200 :body "Label details fetched successfully."})}]
   ["/repos/:owner/:repo/labels" {:post (fn [req] {:status 201 :body "Label created successfully."})}]
   ["/repos/:owner/:repo/labels/:name" {:delete (fn [req] {:status 204 :body "Label deleted successfully."})}]
   ["/repos/:owner/:repo/issues/:number/labels" {:get (fn [req] {:status 200 :body "Issue labels fetched successfully."})}]
   ["/repos/:owner/:repo/issues/:number/labels" {:post (fn [req] {:status 201 :body "Label added to issue successfully."})}]
   ["/repos/:owner/:repo/issues/:number/labels/:name" {:delete (fn [req] {:status 204 :body "Label removed from issue successfully."})}]
   ["/repos/:owner/:repo/issues/:number/labels" {:put (fn [req] {:status 200 :body "Issue labels updated successfully."})}]
   ["/repos/:owner/:repo/issues/:number/labels" {:delete (fn [req] {:status 204 :body "All labels removed from issue successfully."})}]
   ["/repos/:owner/:repo/milestones/:number/labels" {:get (fn [req] {:status 200 :body "Milestone labels fetched successfully."})}]
   ["/repos/:owner/:repo/milestones" {:get (fn [req] {:status 200 :body "Milestones fetched successfully."})}]
   ["/repos/:owner/:repo/milestones/:number" {:get (fn [req] {:status 200 :body "Milestone details fetched successfully."})}]
   ["/repos/:owner/:repo/milestones" {:post (fn [req] {:status 201 :body "Milestone created successfully."})}]
   ["/repos/:owner/:repo/milestones/:number" {:delete (fn [req] {:status 204 :body "Milestone deleted successfully."})}]

   ;; Miscellaneous
   ["/emojis" {:get (fn [req] {:status 200 :body "Emojis fetched successfully."})}]
   ["/gitignore/templates" {:get (fn [req] {:status 200 :body "Gitignore templates fetched successfully."})}]
   ["/gitignore/templates/:name" {:get (fn [req] {:status 200 :body "Gitignore template details fetched successfully."})}]
   ["/markdown" {:post (fn [req] {:status 200 :body "Markdown rendered successfully."})}]
   ["/markdown/raw" {:post (fn [req] {:status 200 :body "Markdown rendered successfully."})}]
   ["/meta" {:get (fn [req] {:status 200 :body "Meta information fetched successfully."})}]
   ["/rate_limit" {:get (fn [req] {:status 200 :body "Rate limit status fetched successfully."})}]

   ;; Organizations
   ["/users/:user/orgs" {:get (fn [req] {:status 200 :body "User organizations fetched successfully."})}]
   ["/user/orgs" {:get (fn [req] {:status 200 :body "User organizations fetched successfully."})}]
   ["/orgs/:org" {:get (fn [req] {:status 200 :body "Organization details fetched successfully."})}]
   ["/orgs/:org/members" {:get (fn [req] {:status 200 :body "Organization members fetched successfully."})}]
   ["/orgs/:org/members/:user" {:get (fn [req] {:status 200 :body "Organization member details fetched successfully."})}]
   ["/orgs/:org/members/:user" {:delete (fn [req] {:status 204 :body "Member removed from organization successfully."})}]
   ["/orgs/:org/public_members" {:get (fn [req] {:status 200 :body "Public members of the organization fetched successfully."})}]
   ["/orgs/:org/public_members/:user" {:get (fn [req] {:status 200 :body "Public member details fetched successfully."})}]
   ["/orgs/:org/public_members/:user" {:put (fn [req] {:status 204 :body "Member made public in organization successfully."})}]
   ["/orgs/:org/public_members/:user" {:delete (fn [req] {:status 204 :body "Public status of member removed successfully."})}]
   ["/orgs/:org/teams" {:get (fn [req] {:status 200 :body "Teams fetched successfully."})}]
   ["/teams/:id" {:get (fn [req] {:status 200 :body "Team details fetched successfully."})}]
   ["/orgs/:org/teams" {:post (fn [req] {:status 201 :body "Team created successfully."})}]
   ["/teams/:id" {:delete (fn [req] {:status 204 :body "Team deleted successfully."})}]
   ["/teams/:id/members" {:get (fn [req] {:status 200 :body "Team members fetched successfully."})}]
   ["/teams/:id/members/:user" {:get (fn [req] {:status 200 :body "Team member details fetched successfully."})}]
   ["/teams/:id/members/:user" {:put (fn [req] {:status 204 :body "Member added to team successfully."})}]
   ["/teams/:id/members/:user" {:delete (fn [req] {:status 204 :body "Member removed from team successfully."})}]
   ["/teams/:id/repos" {:get (fn [req] {:status 200 :body "Team repositories fetched successfully."})}]
   ["/teams/:id/repos/:owner/:repo" {:get (fn [req] {:status 200 :body "Team repository details fetched successfully."})}]
   ["/teams/:id/repos/:owner/:repo" {:put (fn [req] {:status 204 :body "Repository added to team successfully."})}]
   ["/teams/:id/repos/:owner/:repo" {:delete (fn [req] {:status 204 :body "Repository removed from team successfully."})}]
   ["/user/teams" {:get (fn [req] {:status 200 :body "User teams fetched successfully."})}]

   ;; Pull Requests
   ["/repos/:owner/:repo/pulls" {:get (fn [req] {:status 200 :body "Pull requests fetched successfully."})}]
   ["/repos/:owner/:repo/pulls/:number" {:get (fn [req] {:status 200 :body "Pull request details fetched successfully."})}]
   ["/repos/:owner/:repo/pulls" {:post (fn [req] {:status 201 :body "Pull request created successfully."})}]
   ["/repos/:owner/:repo/pulls/:number/commits" {:get (fn [req] {:status 200 :body "Pull request commits fetched successfully."})}]
   ["/repos/:owner/:repo/pulls/:number/files" {:get (fn [req] {:status 200 :body "Pull request files fetched successfully."})}]
   ["/repos/:owner/:repo/pulls/:number/merge" {:get (fn [req] {:status 200 :body "Merge status fetched successfully."})}]
   ["/repos/:owner/:repo/pulls/:number/merge" {:put (fn [req] {:status 204 :body "Pull request merged successfully."})}]
   ["/repos/:owner/:repo/pulls/:number/comments" {:get (fn [req] {:status 200 :body "Pull request comments fetched successfully."})}]
   ["/repos/:owner/:repo/pulls/:number/comments" {:put (fn [req] {:status 204 :body "Comment added to pull request successfully."})}]

   ;; Repositories
   ["/user/repos" {:get (fn [req] {:status 200 :body "User repositories fetched successfully."})}]
   ["/users/:user/repos" {:get (fn [req] {:status 200 :body "User repositories fetched successfully."})}]
   ["/orgs/:org/repos" {:get (fn [req] {:status 200 :body "Organization repositories fetched successfully."})}]
   ["/repositories" {:get (fn [req] {:status 200 :body "Repositories fetched successfully."})}]
   ["/user/repos" {:post (fn [req] {:status 201 :body "User repository created successfully."})}]
   ["/orgs/:org/repos" {:post (fn [req] {:status 201 :body "Organization repository created successfully."})}]
   ["/repos/:owner/:repo" {:get (fn [req] {:status 200 :body "Repository details fetched successfully."})}]
   ["/repos/:owner/:repo/contributors" {:get (fn [req] {:status 200 :body "Repository contributors fetched successfully."})}]
   ["/repos/:owner/:repo/languages" {:get (fn [req] {:status 200 :body "Repository languages fetched successfully."})}]
   ["/repos/:owner/:repo/teams" {:get (fn [req] {:status 200 :body "Repository teams fetched successfully."})}]
   ["/repos/:owner/:repo/tags" {:get (fn [req] {:status 200 :body "Repository tags fetched successfully."})}]
   ["/repos/:owner/:repo/branches" {:get (fn [req] {:status 200 :body "Repository branches fetched successfully."})}]
   ["/repos/:owner/:repo/branches/:branch" {:get (fn [req] {:status 200 :body "Branch details fetched successfully."})}]
   ["/repos/:owner/:repo" {:delete (fn [req] {:status 204 :body "Repository deleted successfully."})}]
   ["/repos/:owner/:repo/collaborators" {:get (fn [req] {:status 200 :body "Collaborators fetched successfully."})}]
   ["/repos/:owner/:repo/collaborators/:user" {:get (fn [req] {:status 200 :body "Collaborator details fetched successfully."})}]
   ["/repos/:owner/:repo/collaborators/:user" {:put (fn [req] {:status 204 :body "Collaborator added successfully."})}]
   ["/repos/:owner/:repo/collaborators/:user" {:delete (fn [req] {:status 204 :body "Collaborator removed successfully."})}]
   ["/repos/:owner/:repo/comments" {:get (fn [req] {:status 200 :body "Repository comments fetched successfully."})}]
   ["/repos/:owner/:repo/commits/:sha/comments" {:get (fn [req] {:status 200 :body "Commit comments fetched successfully."})}]
   ["/repos/:owner/:repo/commits/:sha/comments" {:post (fn [req] {:status 201 :body "Comment added to commit successfully."})}]
   ["/repos/:owner/:repo/comments/:id" {:get (fn [req] {:status 200 :body "Comment details fetched successfully."})}]
   ["/repos/:owner/:repo/comments/:id" {:delete (fn [req] {:status 204 :body "Comment deleted successfully."})}]
   ["/repos/:owner/:repo/commits" {:get (fn [req] {:status 200 :body "Commits fetched successfully."})}]
   ["/repos/:owner/:repo/commits/:sha" {:get (fn [req] {:status 200 :body "Commit details fetched successfully."})}]
   ["/repos/:owner/:repo/readme" {:get (fn [req] {:status 200 :body "Repository README fetched successfully."})}]
   ["/repos/:owner/:repo/keys" {:get (fn [req] {:status 200 :body "Repository keys fetched successfully."})}]
   ["/repos/:owner/:repo/keys/:id" {:get (fn [req] {:status 200 :body "Repository key details fetched successfully."})}]
   ["/repos/:owner/:repo/keys" {:post (fn [req] {:status 201 :body "Repository key added successfully."})}]
   ["/repos/:owner/:repo/keys/:id" {:delete (fn [req] {:status 204 :body "Repository key deleted successfully."})}]
   ["/repos/:owner/:repo/downloads" {:get (fn [req] {:status 200 :body "Downloads fetched successfully."})}]
   ["/repos/:owner/:repo/downloads/:id" {:get (fn [req] {:status 200 :body "Download details fetched successfully."})}]
   ["/repos/:owner/:repo/downloads/:id" {:delete (fn [req] {:status 204 :body "Download deleted successfully."})}]
   ["/repos/:owner/:repo/forks" {:get (fn [req] {:status 200 :body "Forks fetched successfully."})}]
   ["/repos/:owner/:repo/forks" {:post (fn [req] {:status 201 :body "Repository forked successfully."})}]
   ["/repos/:owner/:repo/hooks" {:get (fn [req] {:status 200 :body "Hooks fetched successfully."})}]
   ["/repos/:owner/:repo/hooks/:id" {:get (fn [req] {:status 200 :body "Hook details fetched successfully."})}]
   ["/repos/:owner/:repo/hooks" {:post (fn [req] {:status 201 :body "Hook created successfully."})}]
   ["/repos/:owner/:repo/hooks/:id/tests" {:post (fn [req] {:status 201 :body "Hook test initiated successfully."})}]
   ["/repos/:owner/:repo/hooks/:id" {:delete (fn [req] {:status 204 :body "Hook deleted successfully."})}]
   ["/repos/:owner/:repo/merges" {:post (fn

                                          [req] {:status 201 :body "Merge initiated successfully."})}]
   ["/repos/:owner/:repo/releases" {:get (fn [req] {:status 200 :body "Releases fetched successfully."})}]
   ["/repos/:owner/:repo/releases/:id" {:get (fn [req] {:status 200 :body "Release details fetched successfully."})}]
   ["/repos/:owner/:repo/releases" {:post (fn [req] {:status 201 :body "Release created successfully."})}]
   ["/repos/:owner/:repo/releases/:id" {:delete (fn [req] {:status 204 :body "Release deleted successfully."})}]
   ["/repos/:owner/:repo/releases/:id/assets" {:get (fn [req] {:status 200 :body "Release assets fetched successfully."})}]
   ["/repos/:owner/:repo/stats/contributors" {:get (fn [req] {:status 200 :body "Contributors stats fetched successfully."})}]
   ["/repos/:owner/:repo/stats/commit_activity" {:get (fn [req] {:status 200 :body "Commit activity stats fetched successfully."})}]
   ["/repos/:owner/:repo/stats/code_frequency" {:get (fn [req] {:status 200 :body "Code frequency stats fetched successfully."})}]
   ["/repos/:owner/:repo/stats/participation" {:get (fn [req] {:status 200 :body "Participation stats fetched successfully."})}]
   ["/repos/:owner/:repo/stats/punch_card" {:get (fn [req] {:status 200 :body "Punch card stats fetched successfully."})}]
   ["/repos/:owner/:repo/statuses/:ref" {:get (fn [req] {:status 200 :body "Statuses fetched successfully."})}]
   ["/repos/:owner/:repo/statuses/:ref" {:post (fn [req] {:status 201 :body "Status updated successfully."})}]

   ;; Search
   ["/search/repositories" {:get (fn [req] {:status 200 :body "Repository search results fetched successfully."})}]
   ["/search/code" {:get (fn [req] {:status 200 :body "Code search results fetched successfully."})}]
   ["/search/issues" {:get (fn [req] {:status 200 :body "Issues search results fetched successfully."})}]
   ["/search/users" {:get (fn [req] {:status 200 :body "User search results fetched successfully."})}]
   ["/legacy/issues/search/:owner/:repository/:state/:keyword" {:get (fn [req] {:status 200 :body "Legacy issue search results fetched successfully."})}]
   ["/legacy/repos/search/:keyword" {:get (fn [req] {:status 200 :body "Legacy repository search results fetched successfully."})}]
   ["/legacy/user/search/:keyword" {:get (fn [req] {:status 200 :body "Legacy user search results fetched successfully."})}]
   ["/legacy/user/email/:email" {:get (fn [req] {:status 200 :body "Legacy email search results fetched successfully."})}]

   ;; Users
   ["/users/:user" {:get (fn [req] {:status 200 :body "User details fetched successfully."})}]
   ["/user" {:get (fn [req] {:status 200 :body "User details fetched successfully."})}]
   ["/users" {:get (fn [req] {:status 200 :body "Users fetched successfully."})}]
   ["/user/emails" {:get (fn [req] {:status 200 :body "User emails fetched successfully."})}]
   ["/user/emails" {:post (fn [req] {:status 201 :body "Email added to user successfully."})}]
   ["/user/emails" {:delete (fn [req] {:status 204 :body "Email removed from user successfully."})}]
   ["/users/:user/followers" {:get (fn [req] {:status 200 :body "User followers fetched successfully."})}]
   ["/user/followers" {:get (fn [req] {:status 200 :body "User followers fetched successfully."})}]
   ["/users/:user/following" {:get (fn [req] {:status 200 :body "User following fetched successfully."})}]
   ["/user/following" {:get (fn [req] {:status 200 :body "User following fetched successfully."})}]
   ["/user/following/:user" {:get (fn [req] {:status 200 :body "Following user details fetched successfully."})}]
   ["/users/:user/following/:target_user" {:get (fn [req] {:status 200 :body "Following target user details fetched successfully."})}]
   ["/user/following/:user" {:put (fn [req] {:status 204 :body "User followed successfully."})}]
   ["/user/following/:user" {:delete (fn [req] {:status 204 :body "User unfollowed successfully."})}]
   ["/users/:user/keys" {:get (fn [req] {:status 200 :body "User keys fetched successfully."})}]
   ["/user/keys" {:get (fn [req] {:status 200 :body "User keys fetched successfully."})}]
   ["/user/keys/:id" {:get (fn [req] {:status 200 :body "User key details fetched successfully."})}]
   ["/user/keys" {:post (fn [req] {:status 201 :body "User key added successfully."})}]
   ["/user/keys/:id" {:delete (fn [req] {:status 204 :body "User key deleted successfully."})}]]
  )

(def test-data (data-fix test-routes))
